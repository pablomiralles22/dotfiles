global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

alfn_to_greek = {
	 'a': 'alpha', 'b': 'beta', 'c': 'chi',
	 'd': 'delta', 'e': 'varepsilon', 'f': 'phi',
	 'g': 'gamma', 'h': 'eta', 'i': 'iota',
	 'k': 'kappa', 'l': 'lambda', 'm': 'mu',
	 'n': 'nu', 'p': 'pi', 'q': 'theta',
	 'r': 'rho', 's': 'sigma', 't': 'tau',
	 'y': 'psi', 'u': 'upsilon', 'w': 'omega',
	 'z': 'zeta', 'x': 'xi',
}
endglobal


snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[a4paper, total={6in, 8in}]{geometry}
\usepackage[spanish]{babel}
\usepackage{amsmath, amssymb, amsthm, amsfonts, mathabx}
\usepackage{enumitem}
\usepackage{hyperref}

\def\eps{\varepsilon}

\newcommand{\dotp}[2]{\left\langle#1,#2\right\rangle}

\newcounter{objects}[section]
\renewcommand{\theobjects}{\thesection.\arabic{objects}}
\newtheorem{theorem}[objects]{Teorema}
\newtheorem{proposition}[objects]{Proposición}
\newtheorem{definition}[objects]{Definición}
\newtheorem{example}[objects]{Ejemplo}
\newtheorem{corollary}[objects]{Corolario}
\newtheorem{lemma}[objects]{Lema}
\newtheorem{remark}[objects]{Observación}

\setlength{\parskip}{1em}

\title{}
\author{Pablo Miralles González}
\date{\today}

\begin{document}
	\maketitle
	$0
\end{document}
endsnippet

snippet lstconfig "Basic listings config" b
\usepackage{listings}
\usepackage{xcolor}
\definecolor{bluekeywords}{rgb}{0.13, 0.13, 1}
\definecolor{greencomments}{rgb}{0, 0.5, 0}
\definecolor{redstrings}{rgb}{0.9, 0, 0}
\definecolor{graynumbers}{rgb}{0.5, 0.5, 0.5}
\renewcommand{\lstlistingname}{Código}
\renewcommand{\lstlistlistingname}{Lista de \lstlistingname s}
\lstset{
    columns=fullflexible,
    showspaces=false,
    showtabs=false,
    breaklines=true,
    showstringspaces=false,
    breakatwhitespace=true,
    commentstyle=\color{greencomments},
    keywordstyle=\color{bluekeywords},
    stringstyle=\color{redstrings},
    numberstyle=\color{graynumbers},
    frame=single,
    framesep=12pt,
    xleftmargin=12pt,
    tabsize=4,
    captionpos=b,
}

endsnippet

snippet biblio "Basic bibliography config" b
\usepackage[
backend=biber,
style=ieee,
sorting=ynt
]{biblatex}
\addbibresource{ref.bib}
endsnippet

snippet printbiblio "Basic bibliography output" b
\printbibliography[
heading=bibintoc,
title={Referencias}
]
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet lbeg "labeled begin{} / end{}" bA
\\begin{$1}
	\label{$2}
	$0
\\end{$1}
endsnippet

priority 100
context "math()"
snippet elab "underbrace" iA
\\underbrace{$1}_{\text{$2}}$0
endsnippet

priority 100
context "math()"
snippet dotp "dotp" iA
\\dotp{$1}{$2}$0
endsnippet

priority 100
context "math()"
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet figr "Figure environment + ref"
\autoref{fig:$5}$0

\begin{figure}[${1:!htpb}]
	\centering
	${2:\includegraphics[width=\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:!htpb}]
	\centering
	${2:\includegraphics[width=\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet lst "Listing environment" b
\begin{lstlisting}${1:[language=$2]}
$3
\end{lstlisting}$0
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet emph "Emphasis" wA
\emph{${1:${VISUAL}}}$0
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet eqq "Equation" bA
\begin{equation}
	\label{eq:$1}
	${2:${VISUAL}}
.\end{equation}
endsnippet

snippet ali "Aligned" bA
\begin{equation}
	\label{eq:$1}
	\begin{aligned}
		${2:${VISUAL}}
	.\end{aligned}
\end{equation}
endsnippet

snippet Ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{${1:i=1}}^{${2:n}} ${3:a_i z^i}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet '([xyz])(ii|jj|kk|mm|nn)' "index elements" riA
`!p snip.rv = match.group(1) + '_' + match.group(2)[0]`
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet


context "math()"
snippet apr "approx" iA
\approx 
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet XX "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 300
context "math()"
snippet xint "integral on set & measure" wA
\int_{${1:\Omega}} ${2:${VISUAL}}\ d${3:\mu}$0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet circ "Composition" iA
\circ 
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet || "mid" iA
\mid 
endsnippet

context "math()"
snippet SS "subset" Ai
\subseteq 
endsnippet

context "math()"
snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

context "math()"
snippet II "cap" iA
\cap 
endsnippet

context "math()"
snippet UU "cup" iA
\cup 
endsnippet

context "math()"
snippet BUU "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet BII "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\emptyset
endsnippet

context "math()"
snippet '(KK|CC|RR|QQ|ZZ|NN|DD|HH|LL)' "mathbb" riA
`!p
snip.rv = "\mathbb{" + match.group(1)[0] + "}"
`$0
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet txt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 10
context "math()"
snippet til "tilde" iA
\tilde{$1}$0
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

context "math()"
snippet "vec" "vec" riA
\mathbf{$1}$0
endsnippet

context "math()"
snippet '(aa|bb|cc|dd|ee|ff|gg|hh|ii|kk|ll|mm|nn|pp|qq|rr|ss|tt|uu|vv|ww|xx|yy|zz)' "alpha to greek" rA
`!p
letter = match.group(1)[0]
suff = alfn_to_greek[letter]
snip.rv = '\\' + suff
`$0
endsnippet

context "math()"
snippet '(Aa|Bb|Cc|Dd|Ff|Gg|Hh|Ii|Kk|Ll|Mm|Nn|Pp|Qq|Rr|Ss|Tt|Uu|Vv|Ww|Xx|Yy|Zz)' "alpha to greek" rA
`!p
letter = match.group(1)[1]
suff = alfn_to_greek[letter]
snip.rv = '\\' + suff.capitalize()
`$0
endsnippet

context "math()"
snippet ort "ort" iA
\bot
endsnippet


context "math()"
snippet '([sS])dir' "direct sum" riA
\\`!p snip.rv = 'big' if match.group(1)=='S' else ''`oplus$0
endsnippet

context "math()"
snippet odot "odot" iA
\odot 
endsnippet

snippet arff "autoref" iA
(\autoref{$1}) $0
endsnippet

context "math()"
snippet algnum "Algebraic numbers" iA
\mathcal{A}_\mathbb{Q}
endsnippet

context "math()"
snippet AK "Ring of integers" iA
\mathbb{A}_{${1:K}}$0
endsnippet


